// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: pkg/common/pb/controller.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Controller_TaskStream_FullMethodName = "/pb.Controller/TaskStream"
)

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	TaskStream(ctx context.Context, opts ...grpc.CallOption) (Controller_TaskStreamClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) TaskStream(ctx context.Context, opts ...grpc.CallOption) (Controller_TaskStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], Controller_TaskStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerTaskStreamClient{stream}
	return x, nil
}

type Controller_TaskStreamClient interface {
	Send(*TaskStreamRequest) error
	Recv() (*TaskStreamResponse, error)
	grpc.ClientStream
}

type controllerTaskStreamClient struct {
	grpc.ClientStream
}

func (x *controllerTaskStreamClient) Send(m *TaskStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerTaskStreamClient) Recv() (*TaskStreamResponse, error) {
	m := new(TaskStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	TaskStream(Controller_TaskStreamServer) error
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) TaskStream(Controller_TaskStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TaskStream not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_TaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).TaskStream(&controllerTaskStreamServer{stream})
}

type Controller_TaskStreamServer interface {
	Send(*TaskStreamResponse) error
	Recv() (*TaskStreamRequest, error)
	grpc.ServerStream
}

type controllerTaskStreamServer struct {
	grpc.ServerStream
}

func (x *controllerTaskStreamServer) Send(m *TaskStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerTaskStreamServer) Recv() (*TaskStreamRequest, error) {
	m := new(TaskStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaskStream",
			Handler:       _Controller_TaskStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/common/pb/controller.proto",
}
